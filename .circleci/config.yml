# THIS FILE IS AUTO-GENERATED. DO NOT CHANGE IT DIRECTLY.
# SEE tools/merger TO MAKE CHANGES.
#
version: 2
#
# Define common steps all parts of the test workflow use
references:
  ignored-branches: &ignored-branches
    branches:
      ignore:
        - gh-pages
  node-module-cache-options: &node-module-cache-options
    key: node-module-package-cache-{{ .Branch }}-{{ .Revision }}
  dist-cache-options: &dist-cache-options
    key: dist-package-cache-{{ .Branch }}-{{ .Revision }}
  core-cache-options: &core-cache-options
    key: core-package-cache-{{ .Branch }}-{{ .Revision }}
#
# Define Jobs to run
jobs:
  build:
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - run:
          name: install pnpm
          command: sudo npm install -g pnpm
      - run:
          name: pnpm-install
          command: pnpm install --prefer-frozen-lockfile
      - save_cache:
          <<: *node-module-cache-options
          paths:
            - apps/staging-public/node_modules
            - apps/ui-test/node_modules
            - cli/node_modules
            - clients/@grouparoo/web/node_modules
            - core/node_modules
            - node_modules
            - plugins/@grouparoo/app-templates/node_modules
            - plugins/@grouparoo/bigquery/node_modules
            - plugins/@grouparoo/csv/node_modules
            - plugins/@grouparoo/demo/node_modules
            - plugins/@grouparoo/files-local/node_modules
            - plugins/@grouparoo/files-s3/node_modules
            - plugins/@grouparoo/google-sheets/node_modules
            - plugins/@grouparoo/hubspot/node_modules
            - plugins/@grouparoo/logger/node_modules
            - plugins/@grouparoo/mailchimp/node_modules
            - plugins/@grouparoo/marketo/node_modules
            - plugins/@grouparoo/mysql/node_modules
            - plugins/@grouparoo/newrelic/node_modules
            - plugins/@grouparoo/postgres/node_modules
            - plugins/@grouparoo/redshift/node_modules
            - plugins/@grouparoo/sailthru/node_modules
            - plugins/@grouparoo/salesforce/node_modules
            - plugins/@grouparoo/snowflake/node_modules
            - plugins/@grouparoo/spec-helper/node_modules
            - plugins/@grouparoo/zendesk/node_modules
            - tools/merger/node_modules
            - ui/node_modules
      - save_cache:
          <<: *dist-cache-options
          paths:
            - cli/dist
            - clients/@grouparoo/web/dist
            - plugins/@grouparoo/app-templates/dist
            - plugins/@grouparoo/bigquery/dist
            - plugins/@grouparoo/csv/dist
            - plugins/@grouparoo/demo/dist
            - plugins/@grouparoo/files-local/dist
            - plugins/@grouparoo/files-s3/dist
            - plugins/@grouparoo/google-sheets/dist
            - plugins/@grouparoo/hubspot/dist
            - plugins/@grouparoo/logger/dist
            - plugins/@grouparoo/mailchimp/dist
            - plugins/@grouparoo/marketo/dist
            - plugins/@grouparoo/mysql/dist
            - plugins/@grouparoo/newrelic/dist
            - plugins/@grouparoo/postgres/dist
            - plugins/@grouparoo/redshift/dist
            - plugins/@grouparoo/sailthru/dist
            - plugins/@grouparoo/salesforce/dist
            - plugins/@grouparoo/snowflake/dist
            - plugins/@grouparoo/spec-helper/dist
            - plugins/@grouparoo/zendesk/dist
      - save_cache:
          <<: *core-cache-options
          paths:
            - core/dist
            - ui/.next
  license-checker:
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - restore_cache:
          <<: *node-module-cache-options
      - restore_cache:
          <<: *dist-cache-options
      - restore_cache:
          <<: *core-cache-options
      - run:
          name: install pnpm
          command: sudo npm install -g pnpm
      - run:
          name: license-checker
          command: ./tools/license-checker/check
  spell-checker:
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - restore_cache:
          <<: *node-module-cache-options
      - restore_cache:
          <<: *dist-cache-options
      - restore_cache:
          <<: *core-cache-options
      - run:
          name: install pnpm
          command: sudo npm install -g pnpm
      - run:
          name: spell-checker
          command: ./tools/spell-checker/check
  linter:
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - restore_cache:
          <<: *node-module-cache-options
      - restore_cache:
          <<: *dist-cache-options
      - restore_cache:
          <<: *core-cache-options
      - run:
          name: install pnpm
          command: sudo npm install -g pnpm
      - run:
          name: linter
          command: pnpm run lint
  test-core-api:
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: redis:latest
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: circleci/postgres:9
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      - restore_cache:
          <<: *node-module-cache-options
      - restore_cache:
          <<: *dist-cache-options
      - restore_cache:
          <<: *core-cache-options
      - run:
          name: install postgresql client
          command: sudo apt install -y postgresql-client
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: create test databases
          command: cd core && ./bin/create_test_databases
      - run:
          name: test
          command: cd core && ./node_modules/.bin/jest --ci --maxWorkers 2
  test-core-local:
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: redis:latest
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - restore_cache:
          <<: *node-module-cache-options
      - restore_cache:
          <<: *dist-cache-options
      - restore_cache:
          <<: *core-cache-options
      - run:
          name: test
          command: cd core/ && ./node_modules/.bin/jest __tests__/models __tests__/actions --ci --maxWorkers 2
          environment:
            DB_DIALECT: sqlite
  test-ui:
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: redis:latest
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: circleci/postgres:9
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_PASSWORD: password
      - image: selenium/standalone-chrome:latest
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - restore_cache:
          <<: *node-module-cache-options
      - restore_cache:
          <<: *dist-cache-options
      - restore_cache:
          <<: *core-cache-options
      - run:
          name: install postgresql client
          command: sudo apt install -y postgresql-client
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: create test databases
          command: cd core && ./bin/create_test_databases
      - run:
          name: test
          command: cd ui && ./node_modules/.bin/jest --ci --maxWorkers 2
          environment:
            SELENIUM_REMOTE_URL: http://localhost:4444/wd/hub
  test-staging-public:
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: redis:latest
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: circleci/postgres:9
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      - restore_cache:
          <<: *node-module-cache-options
      - restore_cache:
          <<: *dist-cache-options
      - restore_cache:
          <<: *core-cache-options
      - run:
          name: install postgresql client
          command: sudo apt install -y postgresql-client
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: create test databases
          command: createdb grouparoo_development --host localhost --user postgres
      - run:
          name: test-staging-public
          command: cd apps/staging-public && ./__tests__/integration
          environment:
            PORT: 3000
            GROUPAROO_TELEMETRY_ENABLED: "false"
            WEB_SERVER: "true"
            SCHEDULER: "true"
            WORKERS: 1
  test-plugin-app-templates:
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: redis:latest
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: circleci/postgres:9
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      - restore_cache:
          <<: *node-module-cache-options
      - restore_cache:
          <<: *dist-cache-options
      - restore_cache:
          <<: *core-cache-options
      - run:
          name: install postgresql client
          command: sudo apt install -y postgresql-client
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: create test databases
          command: cd core && ./bin/create_test_databases
      - run:
          name: test
          command: cd plugins/@grouparoo/app-templates && ./node_modules/.bin/jest  --ci --passWithNoTests --runInBand
  test-plugin-bigquery:
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: redis:latest
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: circleci/postgres:9
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      - restore_cache:
          <<: *node-module-cache-options
      - restore_cache:
          <<: *dist-cache-options
      - restore_cache:
          <<: *core-cache-options
      - run:
          name: install postgresql client
          command: sudo apt install -y postgresql-client
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: create test databases
          command: cd core && ./bin/create_test_databases
      - run:
          name: test
          command: cd plugins/@grouparoo/bigquery && ./node_modules/.bin/jest  --ci --passWithNoTests --runInBand
  test-plugin-csv:
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: redis:latest
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: circleci/postgres:9
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      - restore_cache:
          <<: *node-module-cache-options
      - restore_cache:
          <<: *dist-cache-options
      - restore_cache:
          <<: *core-cache-options
      - run:
          name: install postgresql client
          command: sudo apt install -y postgresql-client
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: create test databases
          command: cd core && ./bin/create_test_databases
      - run:
          name: test
          command: cd plugins/@grouparoo/csv && ./node_modules/.bin/jest  --ci --passWithNoTests --runInBand
  test-plugin-demo:
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: redis:latest
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: circleci/postgres:9
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      - restore_cache:
          <<: *node-module-cache-options
      - restore_cache:
          <<: *dist-cache-options
      - restore_cache:
          <<: *core-cache-options
      - run:
          name: install postgresql client
          command: sudo apt install -y postgresql-client
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: create test databases
          command: cd core && ./bin/create_test_databases
      - run:
          name: test
          command: cd plugins/@grouparoo/demo && ./node_modules/.bin/jest  --ci --passWithNoTests --runInBand
  test-plugin-files-local:
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: redis:latest
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: circleci/postgres:9
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      - restore_cache:
          <<: *node-module-cache-options
      - restore_cache:
          <<: *dist-cache-options
      - restore_cache:
          <<: *core-cache-options
      - run:
          name: install postgresql client
          command: sudo apt install -y postgresql-client
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: create test databases
          command: cd core && ./bin/create_test_databases
      - run:
          name: test
          command: cd plugins/@grouparoo/files-local && ./node_modules/.bin/jest  --ci --passWithNoTests --runInBand
  test-plugin-files-s3:
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: redis:latest
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: circleci/postgres:9
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      - restore_cache:
          <<: *node-module-cache-options
      - restore_cache:
          <<: *dist-cache-options
      - restore_cache:
          <<: *core-cache-options
      - run:
          name: install postgresql client
          command: sudo apt install -y postgresql-client
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: create test databases
          command: cd core && ./bin/create_test_databases
      - run:
          name: test
          command: cd plugins/@grouparoo/files-s3 && ./node_modules/.bin/jest  --ci --passWithNoTests --runInBand
  test-plugin-google-sheets:
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: redis:latest
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: circleci/postgres:9
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      - restore_cache:
          <<: *node-module-cache-options
      - restore_cache:
          <<: *dist-cache-options
      - restore_cache:
          <<: *core-cache-options
      - run:
          name: install postgresql client
          command: sudo apt install -y postgresql-client
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: create test databases
          command: cd core && ./bin/create_test_databases
      - run:
          name: test
          command: cd plugins/@grouparoo/google-sheets && ./node_modules/.bin/jest  --ci --passWithNoTests --runInBand
  test-plugin-hubspot:
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: redis:latest
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: circleci/postgres:9
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      - restore_cache:
          <<: *node-module-cache-options
      - restore_cache:
          <<: *dist-cache-options
      - restore_cache:
          <<: *core-cache-options
      - run:
          name: install postgresql client
          command: sudo apt install -y postgresql-client
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: create test databases
          command: cd core && ./bin/create_test_databases
      - run:
          name: test
          command: cd plugins/@grouparoo/hubspot && ./node_modules/.bin/jest  --ci --passWithNoTests --runInBand
  test-plugin-logger:
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: redis:latest
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: circleci/postgres:9
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      - restore_cache:
          <<: *node-module-cache-options
      - restore_cache:
          <<: *dist-cache-options
      - restore_cache:
          <<: *core-cache-options
      - run:
          name: install postgresql client
          command: sudo apt install -y postgresql-client
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: create test databases
          command: cd core && ./bin/create_test_databases
      - run:
          name: test
          command: cd plugins/@grouparoo/logger && ./node_modules/.bin/jest  --ci --passWithNoTests --runInBand
  test-plugin-mailchimp:
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: redis:latest
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: circleci/postgres:9
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      - restore_cache:
          <<: *node-module-cache-options
      - restore_cache:
          <<: *dist-cache-options
      - restore_cache:
          <<: *core-cache-options
      - run:
          name: install postgresql client
          command: sudo apt install -y postgresql-client
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: create test databases
          command: cd core && ./bin/create_test_databases
      - run:
          name: test
          command: cd plugins/@grouparoo/mailchimp && ./node_modules/.bin/jest  --ci --passWithNoTests --runInBand
  test-plugin-marketo:
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: redis:latest
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: circleci/postgres:9
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      - restore_cache:
          <<: *node-module-cache-options
      - restore_cache:
          <<: *dist-cache-options
      - restore_cache:
          <<: *core-cache-options
      - run:
          name: install postgresql client
          command: sudo apt install -y postgresql-client
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: create test databases
          command: cd core && ./bin/create_test_databases
      - run:
          name: test
          command: cd plugins/@grouparoo/marketo && ./node_modules/.bin/jest  --ci --passWithNoTests --runInBand
  test-plugin-mysql:
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: redis:latest
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: circleci/postgres:9
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_PASSWORD: password
      - image: circleci/mysql:5
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - restore_cache:
          <<: *node-module-cache-options
      - restore_cache:
          <<: *dist-cache-options
      - restore_cache:
          <<: *core-cache-options
      - run:
          name: install postgresql client
          command: sudo apt install -y postgresql-client
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: create test databases
          command: cd core && ./bin/create_test_databases
      - run:
          name: install mysql client
          command: sudo apt install -y mysql-client
      - run:
          name: create mysql databases
          command: mysql -e "create database grouparoo_test" -u root -h 127.0.0.1
      - run:
          name: test
          command: cd plugins/@grouparoo/mysql && ./node_modules/.bin/jest  --ci --passWithNoTests --runInBand
  test-plugin-newrelic:
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: redis:latest
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: circleci/postgres:9
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      - restore_cache:
          <<: *node-module-cache-options
      - restore_cache:
          <<: *dist-cache-options
      - restore_cache:
          <<: *core-cache-options
      - run:
          name: install postgresql client
          command: sudo apt install -y postgresql-client
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: create test databases
          command: cd core && ./bin/create_test_databases
      - run:
          name: test
          command: cd plugins/@grouparoo/newrelic && ./node_modules/.bin/jest  --ci --passWithNoTests --runInBand
  test-plugin-postgres:
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: redis:latest
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: circleci/postgres:9
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      - restore_cache:
          <<: *node-module-cache-options
      - restore_cache:
          <<: *dist-cache-options
      - restore_cache:
          <<: *core-cache-options
      - run:
          name: install postgresql client
          command: sudo apt install -y postgresql-client
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: create test databases
          command: cd core && ./bin/create_test_databases
      - run:
          name: test
          command: cd plugins/@grouparoo/postgres && ./node_modules/.bin/jest  --ci --passWithNoTests --runInBand
  test-plugin-redshift:
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: redis:latest
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: circleci/postgres:9
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      - restore_cache:
          <<: *node-module-cache-options
      - restore_cache:
          <<: *dist-cache-options
      - restore_cache:
          <<: *core-cache-options
      - run:
          name: install postgresql client
          command: sudo apt install -y postgresql-client
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: create test databases
          command: cd core && ./bin/create_test_databases
      - run:
          name: test
          command: cd plugins/@grouparoo/redshift && ./node_modules/.bin/jest  --ci --passWithNoTests --runInBand
  test-plugin-sailthru:
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: redis:latest
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: circleci/postgres:9
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      - restore_cache:
          <<: *node-module-cache-options
      - restore_cache:
          <<: *dist-cache-options
      - restore_cache:
          <<: *core-cache-options
      - run:
          name: install postgresql client
          command: sudo apt install -y postgresql-client
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: create test databases
          command: cd core && ./bin/create_test_databases
      - run:
          name: test
          command: cd plugins/@grouparoo/sailthru && ./node_modules/.bin/jest  --ci --passWithNoTests --runInBand
  test-plugin-salesforce:
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: redis:latest
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: circleci/postgres:9
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      - restore_cache:
          <<: *node-module-cache-options
      - restore_cache:
          <<: *dist-cache-options
      - restore_cache:
          <<: *core-cache-options
      - run:
          name: install postgresql client
          command: sudo apt install -y postgresql-client
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: create test databases
          command: cd core && ./bin/create_test_databases
      - run:
          name: test
          command: cd plugins/@grouparoo/salesforce && ./node_modules/.bin/jest  --ci --passWithNoTests --runInBand
  test-plugin-snowflake:
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: redis:latest
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: circleci/postgres:9
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      - restore_cache:
          <<: *node-module-cache-options
      - restore_cache:
          <<: *dist-cache-options
      - restore_cache:
          <<: *core-cache-options
      - run:
          name: install postgresql client
          command: sudo apt install -y postgresql-client
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: create test databases
          command: cd core && ./bin/create_test_databases
      - run:
          name: test
          command: cd plugins/@grouparoo/snowflake && ./node_modules/.bin/jest  --ci --passWithNoTests --runInBand
  test-plugin-spec-helper:
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: redis:latest
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: circleci/postgres:9
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      - restore_cache:
          <<: *node-module-cache-options
      - restore_cache:
          <<: *dist-cache-options
      - restore_cache:
          <<: *core-cache-options
      - run:
          name: install postgresql client
          command: sudo apt install -y postgresql-client
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: create test databases
          command: cd core && ./bin/create_test_databases
      - run:
          name: test
          command: cd plugins/@grouparoo/spec-helper && ./node_modules/.bin/jest  --ci --passWithNoTests --runInBand
  test-client-web:
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: redis:latest
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: circleci/postgres:9
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      - restore_cache:
          <<: *node-module-cache-options
      - restore_cache:
          <<: *dist-cache-options
      - restore_cache:
          <<: *core-cache-options
      - run:
          name: install postgresql client
          command: sudo apt install -y postgresql-client
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: create test databases
          command: cd core && ./bin/create_test_databases
      - run:
          name: test
          command: cd clients/@grouparoo/web && ./node_modules/.bin/jest  --ci --passWithNoTests --runInBand
  test-plugin-zendesk:
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: redis:latest
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: circleci/postgres:9
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      - restore_cache:
          <<: *node-module-cache-options
      - restore_cache:
          <<: *dist-cache-options
      - restore_cache:
          <<: *core-cache-options
      - run:
          name: install postgresql client
          command: sudo apt install -y postgresql-client
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: create test databases
          command: cd core && ./bin/create_test_databases
      - run:
          name: test
          command: cd plugins/@grouparoo/zendesk && ./node_modules/.bin/jest  --ci --passWithNoTests --runInBand
  test-cli:
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - restore_cache:
          <<: *node-module-cache-options
      - restore_cache:
          <<: *dist-cache-options
      - restore_cache:
          <<: *core-cache-options
      - run:
          name: install pnpm
          command: sudo npm install -g pnpm
      - run:
          name: test
          command: cd cli && pnpm test
  complete:
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - run:
          name: complete
          command: echo "Tests Complete!"
  publish:
    docker:
      - image: circleci/node:12
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - restore_cache:
          <<: *node-module-cache-options
      - restore_cache:
          <<: *dist-cache-options
      - restore_cache:
          <<: *core-cache-options
      - add_ssh_keys:
          fingerprints:
            - 49:46:31:67:74:97:c4:66:44:79:89:67:29:41:89:96
      - run: git config --global user.email "hello@grouparoo.com"
      - run: git config --global user.name "Grouparoo Bot"
      - run: sudo npm install -g pnpm
      - run: pnpm run -r prepare
      - run: ./bin/publish
workflows:
  version: 2
  #
  # Run the tests on push
  test-grouparoo-push:
    jobs:
      - build:
          filters:
            <<: *ignored-branches
      - license-checker:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - spell-checker:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - linter:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-core-api:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-core-local:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-ui:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-staging-public:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-app-templates:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-bigquery:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-csv:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-demo:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-files-local:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-files-s3:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-google-sheets:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-hubspot:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-logger:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-mailchimp:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-marketo:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-mysql:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-newrelic:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-postgres:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-redshift:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-sailthru:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-salesforce:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-snowflake:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-spec-helper:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-client-web:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-zendesk:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-cli:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - complete:
          filters:
            <<: *ignored-branches
          requires:
            - license-checker
            - spell-checker
            - linter
            - test-core-api
            - test-core-local
            - test-ui
            - test-staging-public
            - test-plugin-app-templates
            - test-plugin-bigquery
            - test-plugin-csv
            - test-plugin-demo
            - test-plugin-files-local
            - test-plugin-files-s3
            - test-plugin-google-sheets
            - test-plugin-hubspot
            - test-plugin-logger
            - test-plugin-mailchimp
            - test-plugin-marketo
            - test-plugin-mysql
            - test-plugin-newrelic
            - test-plugin-postgres
            - test-plugin-redshift
            - test-plugin-sailthru
            - test-plugin-salesforce
            - test-plugin-snowflake
            - test-plugin-spec-helper
            - test-client-web
            - test-plugin-zendesk
            - test-cli
      - publish:
          filters:
            branches:
              only:
                - stable
          requires:
            - complete
  #
  # Run the tests each week + publish pre-release from master branch
  test-grouparoo-nightly:
    triggers:
      - schedule:
          cron: "0 0 * * 5"
          filters:
            branches:
              only:
                - master
    jobs:
      - build:
          filters:
            <<: *ignored-branches
      - license-checker:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - spell-checker:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - linter:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-core-api:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-core-local:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-ui:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-staging-public:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-app-templates:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-bigquery:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-csv:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-demo:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-files-local:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-files-s3:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-google-sheets:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-hubspot:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-logger:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-mailchimp:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-marketo:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-mysql:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-newrelic:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-postgres:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-redshift:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-sailthru:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-salesforce:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-snowflake:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-spec-helper:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-client-web:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-plugin-zendesk:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - test-cli:
          filters:
            <<: *ignored-branches
          requires:
            - build
      - complete:
          filters:
            <<: *ignored-branches
          requires:
            - license-checker
            - spell-checker
            - linter
            - test-core-api
            - test-core-local
            - test-ui
            - test-staging-public
            - test-plugin-app-templates
            - test-plugin-bigquery
            - test-plugin-csv
            - test-plugin-demo
            - test-plugin-files-local
            - test-plugin-files-s3
            - test-plugin-google-sheets
            - test-plugin-hubspot
            - test-plugin-logger
            - test-plugin-mailchimp
            - test-plugin-marketo
            - test-plugin-mysql
            - test-plugin-newrelic
            - test-plugin-postgres
            - test-plugin-redshift
            - test-plugin-sailthru
            - test-plugin-salesforce
            - test-plugin-snowflake
            - test-plugin-spec-helper
            - test-client-web
            - test-plugin-zendesk
            - test-cli
      - publish:
          filters:
            branches:
              only:
                - master
          requires:
            - complete
