#!/usr/bin/env bash

set -e

PROJECT_ROOT=$(cd $(dirname $0)/.. && pwd)
if [[ -z "${CI}" ]]; then
  N=$(($(getconf _NPROCESSORS_ONLN)/2)) || 4
else
  N=4
fi

echo -e "ü¶òü¶òü¶ò BUILDING GROUPAROO MONOREPO ü¶òü¶ò"
echo -e "dir: $PROJECT_ROOT"
echo -e ""

# 0. build dependancies
echo "--- (re)building npm dependancies ---"
DEPS=""
for p in $PROJECT_ROOT/node_modules/**/package.json ; do
  # matching "install" will find both postinstall and install scripts!
  if grep -q "install" $p; then
    DEPS="$DEPS $(basename $(dirname $p))"
  fi
done
echo "$DEPS"
if output=$(npm rebuild $DEPS); then
  echo -e  "\r\n‚ú® npm rebuild complete\r\n"
else
  echo -e "\r\n‚ùóÔ∏è error (re)building npm dependancies\r\n"
  echo -e "$output"
  exit 1
fi

# # 1. build core/api
echo "--- building core/api ---"
cd $PROJECT_ROOT/core/api
npm run build-api
echo -e "\r\n‚ú® core API compiled from typescript\r\n"

# 2. build plugins
echo "--- building plugins in parallel (parallelism of $N) ---"

count=0
for d in $PROJECT_ROOT/plugins/*/* ; do
  echo -e "    -> $d"
  output=$(cd "$d" && npm run prepare) &
  pid=$!
  let count+=1
  [[ $((count%N)) -eq 0 ]] && wait "$pid"
done

for job in `jobs -p`; do
  wait $job || (
    echo -e "\r\n‚ùóÔ∏è error building plugins\r\n"
    exit 1
  )
done

echo -e "\r\n‚ú® all plugins built\r\n"

# 3. build main app
echo "--- building the main app ---"

if [[ -z "${SKIP_APP_BUILD}" ]]; then
  MAIN_APP=$(sed -n 1p $PROJECT_ROOT/Procfile | awk -F= '$1=="GROUPAROO_MONOREPO_APP"{print $2}' RS=' ')
  echo "    the main app is $MAIN_APP"
  cd $PROJECT_ROOT/apps/$MAIN_APP
  npm run prepare
else
  echo "skipping main app, building core/web instead"
  cd $PROJECT_ROOT/core/web
  npm run build-web
fi

echo -e "\r\nDone!\r\n"
