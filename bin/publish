#!/bin/bash

set -e
cd "$(dirname "$0")"
cd '..'

GITHUB_ORG='grouparoo'
GITHUB_REPO='grouparoo'
BRANCH=`git rev-parse --abbrev-ref HEAD`
OLD_VERSION=`cat lerna.json | jq -r '.version'`
RELEASE_MODE=$1

echo ""
echo "-----> CHECK INPUTS"
echo ""

if [[ "$RELEASE_MODE" == "alpha" ]]
then
  PRERELEASE='true'
  LERNA_VERSION_ARGS="prerelease --exact --preid alpha --force-publish --yes"
  DIST_TAG="next"
elif [[ "$RELEASE_MODE" == "alpha-minor" ]]
then
  PRERELEASE='true'
  LERNA_VERSION_ARGS="preminor --exact --force-publish --yes"
  DIST_TAG="next"
elif [[ "$RELEASE_MODE" == "alpha-major" ]]
then
  PRERELEASE='true'
  LERNA_VERSION_ARGS="premajor --exact --force-publish --yes"
  DIST_TAG="next"
elif [[ "$RELEASE_MODE" == "stable" ]]
then
  PRERELEASE='false'
  LERNA_VERSION_ARGS="patch --exact --force-publish --yes"
  DIST_TAG="latest"
elif [[ "$RELEASE_MODE" == "stable-minor" ]]
then
  PRERELEASE='false'
  LERNA_VERSION_ARGS="minor --exact --force-publish --yes"
  DIST_TAG="latest"
elif [[ "$RELEASE_MODE" == "stable-major" ]]
then
  PRERELEASE='false'
  LERNA_VERSION_ARGS="major --exact --force-publish --yes"
  DIST_TAG="latest"
else
  echo 'Release Mode required.  "publish alpha" or "publish stable"'
  exit 1
fi

if [[ -z "$GITHUB_AUTH" ]];then
  echo "No GITHUB_AUTH env, exiting.."
  exit 1;
fi

if [ -f ~/.npmrc ]; then
  echo "Found existing .npmrc"
else
  if [[ -z "$NPM_TOKEN" ]];then
    echo "No NPM_TOKEN or ~/.npmrc, exiting.."
    exit 1;
  else
    echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
  fi
fi
echo "Publishing as NPM user: `npm whoami`"

if [[ $BRANCH != 'main' ]]; then
  echo "Not on 'main' branch.  Exiting"
  exit 1
fi

if [[ -n $(git status -s) ]]; then
  echo "There are uncommitted changes on this branch.  Exiting"
  exit 1
fi

echo "Publishing $RELEASE_MODE packages"
echo "Old Version: $OLD_VERSION"

echo ""
echo "-----> INSTALL ROOT DEPENDENCIES"
echo ""

pnpm install --filter @grouparoo/grouparoo

echo ""
echo "-----> BUMP THE VERSION & PUSH TO GITHUB"
echo ""

./node_modules/.bin/lerna version $LERNA_VERSION_ARGS

echo ""
echo "-----> PUBLISH RELEASE NOTES"
echo ""

NEW_VERSION=`cat lerna.json | jq -r '.version'`
echo "New Version: $NEW_VERSION"
sleep 10

./node_modules/.bin/lerna-changelog --from v$OLD_VERSION --to v$NEW_VERSION

CHANGELOG_BODY=`./node_modules/.bin/lerna-changelog --from v$OLD_VERSION --to v$NEW_VERSION`
ESCAPED_CHANGELOG_BODY=`echo "$CHANGELOG_BODY" | jq -R -s -c`
sleep 10

curl -H "Authorization: token $GITHUB_AUTH" --data "{
    \"tag_name\": \"v$NEW_VERSION\",
    \"body\": $ESCAPED_CHANGELOG_BODY,
    \"prerelease\": $PRERELEASE
}" -X POST "https://api.github.com/repos/$GITHUB_ORG/$GITHUB_REPO/releases"

echo ""
echo "-----> INSTALL DEPENDENCIES & BUILD PACKAGES"
echo ""

# Clear build caches
rm -rf core/dist
rm -rf cli/dist
rm -rf plugins/*/*/dist
rm -rf ui/*/.next

pnpm install --prefer-frozen-lockfile
git checkout pnpm-lock.yaml # the other github action will take care of this, but we need a clean working directory to publish

echo ""
echo "-----> PUSH TO NPM"
echo ""

# The Happy path of publishing uses the Lerna script, but if something goes wrong we will try again with a package-by-package attempt with just NPM
# The Lerna command has never failed to bump the versions, but it has failed to publish the packages to NPM
./node_modules/.bin/lerna publish from-git --concurrency 1 --ignore-scripts --dist-tag $DIST_TAG --yes || ./node_modules/.bin/lerna exec --concurrency 1 -- "npm publish --tag $DIST_TAG --ignore-scripts || exit 0"

## COMPLETE

echo ""
echo "-----> Done!"
echo "Version $NEW_VERSION published to $DIST_TAG tag ---"
echo ""

exit 0
