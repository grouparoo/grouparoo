#!/usr/bin/env node

const checker = require("license-checker");
const glob = require("glob");
const path = require("path");
const fs = require("fs");

const excludePackages = [
  // custom exclusions for newrelic
  "newrelic@6.5.0",
  "@newrelic/aws-sdk@1.1.2",
  "@newrelic/koa@3.0.0",
  "@newrelic/native-metrics@5.0.0",
  "@newrelic/superagent@2.0.1",
];

const onlyAllow = [
  "MPL-2.0",
  "MIT",
  "Artistic-2.0",
  "Apache",
  "ISC",
  "BSD",
  "BSD*",
  "BSD-3-Clause",
  "BSD-2-Clause",
  "CC0-1.0",
  "CC-BY-3.0",
  "CC-BY-4.0",
  "Unlicense",
  "WTFPL",
];

const rootPath = path.join(__dirname, "..", "..");
const packageFiles = [].concat(
  glob.sync(path.join(rootPath, "package.json")),
  glob.sync(path.join(rootPath, "*", "package.json")),
  glob.sync(path.join(rootPath, "plugins", "*", "*", "package.json")),
  glob.sync(path.join(rootPath, "internal", "*", "package.json")),
  glob.sync(path.join(rootPath, "apps", "*", "package.json")),
  glob.sync(path.join(rootPath, "tools", "*", "package.json"))
);

// the packages in this repository are explicitly allowed, regardless of their license.
packageFiles.forEach((pkgFile) => {
  const pkgJson = JSON.parse(fs.readFileSync(pkgFile));
  const nameAndVersion = `${pkgJson.name}@${pkgJson.version}`;
  excludePackages.push(nameAndVersion);
});

console.log(
  `checking licenses in ${packageFiles.length} package.json files...`
);
console.log(` - allowed licenses are: ${onlyAllow.join(", ")}`);
console.log(` - excluded packages are: ${excludePackages.join(", ")}`);
console.log("");

for (const i in packageFiles) {
  const packageFile = packageFiles[i];
  const projectRoot = path.dirname(packageFile);
  const options = {
    start: projectRoot,
    excludePackages: excludePackages.join(";"),
    onlyAllow: onlyAllow.join(";"),
  };
  checker.init(options, (error, packages) => {
    if (error) {
      throw error;
    } else {
      console.log(
        `âœ… | checked ${packageFile}.  Found ${
          Object.keys(packages).length
        } packages. All OK!`
      );
    }
  });
}

process.on("uncaughtException", (error) => {
  console.error(`ðŸš« | ${error}`);
  process.exit(1);
});
