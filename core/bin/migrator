#!/usr/bin/env node

/**
 * Run me as if I were a bash program eg: `./bin/migrator up [name]` or `./bin/migrator down <name>}`
 * I run the **compiled** migrations (eg: dist).  You may want to `npm run watch` for changes as you run me.
 */

const path = require("path");
const fs = require("fs");
const { Migrations } = require("../dist/modules/migrations");
const { Sequelize } = require("sequelize");

const args = process.argv.slice(2);
const direction = args[0];
const migrationName = args[1];

function validateInputs() {
  if (!process.env.INIT_CWD) process.env.INIT_CWD = process.env.PWD;
  const relativeCorePath = path.join(
    process.env.INIT_CWD,
    "node_modules",
    "@grouparoo",
    "core"
  );
  if (fs.existsSync(relativeCorePath)) {
    console.info(`running migrator in ${process.env.INIT_CWD}\r\n`);
    process.chdir(relativeCorePath);
  } else {
    console.info(`running migrator in core\r\n`);
  }

  if (!direction)
    return completeProcess(`direction is required (up, upAll, or down + name)`);
  if (!["up", "down", "upAll", "downAll"].includes(direction))
    return completeProcess(`invalid direction ${direction}`);
  if (direction === "down" && !migrationName)
    return completeProcess(`migrationName is required`);
}

async function main() {
  let failureReason;

  try {
    validateInputs();

    const env = process.env.NODE_ENV || "development";
    const configFile = path.resolve(
      __dirname,
      "..",
      "dist",
      "config",
      "sequelize.js"
    );
    const CONFIG = Object.assign({}, require(configFile)[env], {
      autoMigrate: false,
      logging: logSequelizeQuery,
      retry: undefined,
    });
    const sequelizeInstance = new Sequelize(CONFIG);

    const umzugs = Migrations.importMigrationsFromDirectory(
      CONFIG,
      sequelizeInstance,
      logger,
      "info"
    );

    switch (args[0]) {
      case "up": {
        await Migrations.upOne(umzugs);
        break;
      }
      case "upAll": {
        await Migrations.upAll(umzugs);
        break;
      }
      case "down": {
        await Migrations.downOne(umzugs, args[1]);
        break;
      }
      case "downAll": {
        await Migrations.downAll(umzugs);
        break;
      }
    }
  } catch (error) {
    failureReason = error.stack;
  }

  completeProcess(failureReason);
}

function logger(message, level) {
  console.log(message);
}

function logSequelizeQuery(string) {
  if (string.includes("SequelizeMeta")) return; // skip all the boilerplate storage logs
  console.log(string);
}

function completeProcess(failureReason) {
  let exitCode = 0;
  if (failureReason) exitCode = 1;

  !failureReason
    ? console.log("✅ Done")
    : console.error(`❌ ${failureReason || "Something went wrong"}`);
  process.nextTick(() => process.exit(exitCode));
}

main();
