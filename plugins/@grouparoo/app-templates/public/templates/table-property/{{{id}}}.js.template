exports.default = async function buildConfig() {
  return [
    {
      id: {{{id}}},
      name: {{{id}}},
      class: "property",
      sourceId: {{{sourceId}}}, // The ID of the Source that this Property belongs to - e.g. `sourceId: "users_table"`
      type: {{#type}}{{{type}}}{{/type}}{{^type}}"string"{{/type}}, // The type of the Property.  Options are: {{{__typeOptions}}}
      unique: {{#unique}}{{{unique}}}{{/unique}}{{^unique}}false{{/unique}}, // Will Records have unique records for this Property?
      isArray: false, // Is this an Array Property?
      options: {
        column: {{#column}}{{{column}}}{{/column}}{{^column}}'...'{{/column}}, // The column to use for this Property - e.g. `column: "first_name"`
        aggregationMethod: "exact", // The aggregation method.  Options are: {{{__aggregationMethodOptions}}}
        sort: null, // You can sort the results by another column in this table
      },

      // You can optionally filter the results of this Property.
      // For example, if you were collecting SUM(purchases.value) and wanted to exclude those refunded purchases, you could:
      //   filters: [{ key: "state", op: "equals", match: "successful" }],
      // You can also combine filters.  To get a count of each records's active, paid subscriptions you might use:
      // filters: [{ key: "status", op: "equals", match: "active", }, { key: "subscription_type", op: "does not equal", match: "trial" }]
      // and set the aggregationMethod to "count"
      // Options for `op` are: {{{__filterOptions}}}
      filters: [],
    },
  ];
};
